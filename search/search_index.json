{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"OpenScan - 3D Scanner Summary OpenScan is a modular concept, which can be used to build your photogrammetry based 3D scanner. You can simply use the individual modules and adjust it to your needs (i.e. firmware, 3d printed design, PCB, photogrammetry cloud processing ...). The center piece is a Raspberry Pi driven camera/motor controller, which can be used to drive various photogrammetry rigs. The project is based on the contribution of many great and open-minded people by doing tutorials on YouTube, comments on Reddit, publications on GitHub and many other places. Without all those voluntary contributors, this project would not be possible at all. Setup and use your scanner Use the navigation bar on this site or the following links to get your scanner up and running: Soldering Building the OpenScan Classic Building the OpenScan Mini Firmware - Setup Firmware - First start, tips&tricks Photogrammetry Basics Bugs & Feature requests If you like the project and want to help to make it even better, please consider supporting in any of the following ways: report a bug or create a feature request - this can be a minor typo in the firmware, a missing piece in the documentation or a major design revision. Don't be afraid, if you have no programming background: This guide contains all the information you need. share the project and scanning results with the world - the more people join, the faster the project will improve improve the design or electronics help with the documentation create video tutorials or any other educational resources Community Feel free to join one of the following channels to engage with the wonderful OpenScan community. Discord This is the main channel for up-to-date discussions and developments. Reddit - /r/openscan Facebook - Low Budget 3D Scan Twitter Instagram Underlying repositories If you want to take part in the development of a specific part of the OpenScan system, feel free to join: OpenScan-Dokumentation (this repository) OpenScan-Firmware OpenScan-Design - 3D printable files and other design approaches OpenScan-PCB - A place to discuss and improve the PCB designs OpenScanCloud - Web API for photogrammetry processing of image files OpenScan-ML - Development of new tools using Machine Learning","title":"Introduction"},{"location":"#openscan-3d-scanner","text":"","title":"OpenScan - 3D Scanner"},{"location":"#summary","text":"OpenScan is a modular concept, which can be used to build your photogrammetry based 3D scanner. You can simply use the individual modules and adjust it to your needs (i.e. firmware, 3d printed design, PCB, photogrammetry cloud processing ...). The center piece is a Raspberry Pi driven camera/motor controller, which can be used to drive various photogrammetry rigs. The project is based on the contribution of many great and open-minded people by doing tutorials on YouTube, comments on Reddit, publications on GitHub and many other places. Without all those voluntary contributors, this project would not be possible at all.","title":"Summary"},{"location":"#setup-and-use-your-scanner","text":"Use the navigation bar on this site or the following links to get your scanner up and running: Soldering Building the OpenScan Classic Building the OpenScan Mini Firmware - Setup Firmware - First start, tips&tricks Photogrammetry Basics","title":"Setup and use your scanner"},{"location":"#bugs-feature-requests","text":"If you like the project and want to help to make it even better, please consider supporting in any of the following ways: report a bug or create a feature request - this can be a minor typo in the firmware, a missing piece in the documentation or a major design revision. Don't be afraid, if you have no programming background: This guide contains all the information you need. share the project and scanning results with the world - the more people join, the faster the project will improve improve the design or electronics help with the documentation create video tutorials or any other educational resources","title":"Bugs &amp; Feature requests"},{"location":"#community","text":"Feel free to join one of the following channels to engage with the wonderful OpenScan community. Discord This is the main channel for up-to-date discussions and developments. Reddit - /r/openscan Facebook - Low Budget 3D Scan Twitter Instagram","title":"Community"},{"location":"#underlying-repositories","text":"If you want to take part in the development of a specific part of the OpenScan system, feel free to join: OpenScan-Dokumentation (this repository) OpenScan-Firmware OpenScan-Design - 3D printable files and other design approaches OpenScan-PCB - A place to discuss and improve the PCB designs OpenScanCloud - Web API for photogrammetry processing of image files OpenScan-ML - Development of new tools using Machine Learning","title":"Underlying repositories"},{"location":"changelog/","text":"Changelog 2022-05-19 documentation changed: overall structure --> the OpenScan2 repository will serve as a central hub for all informations concerning OpenScan (i.e. firmware, hardware, tutorials ...) 2022-05-11 beta added: changelog and version (finally ;) added: create an update using the node-red-backend inject node (\"create beta\" and \"prepare image creation\" in \"update\" tab) fixed: Error handling in flask (when no preview is taken) fixed: Error when upload failed + node red restarted (multiple instances of curl) fixed: When closing the browser session/missing the popup after the routine, the data set got lost (if this happens, just restart the device and it will be moved to the right location) 2022-04-26 beta added: donation button ;) fixed: the wonderful camera position algorithm was faulty and a bit inefficient fixed: downscaling the preview image caused the preview to disappear (when crop value was to high) fixed: delay_before and delay_after are now properly applied, so that you can set a delay before/after taking a photo fixed: updates might crash the selected camera --> it is now necessary to re-select the camera after certain updates 2022-04-21 beta added: timer (ETA) until a routine is done added: showing progress, while files are being split (before uploading to OpenScanCloud) added: infotexts (FINALLY :) added: several stats/device information fixed: combining two sets did not delete the smaller set 2022-04-20 beta & main !fixed: pi cameras (v1.3, v2.1 and HQ) finally work and can be simply selected in the settings menu !fixed: Raspberry Pi 3B+ and 4 work! (the main limiting factor now is the RAM, where at least 1GB RAM is needed) fixed: live preview sometimes did not work. This has been a network speed issue and has been solved by downscaling the image (resolution can be set) fixed: it is now possible to delete individual sets. fixed: it is now possible to use all LEDs. added: Turntable mode (disable the second axis) added: Pause scan. You can pause and un-pause the scan by simply pressing the button added: second scan pass. When one scan is done, you can immediately run a second pass. This is especially useful, if you want to re-orient the object added: auto-timeout. Turn off the ringlight (todo: and motors) after 300 seconds (value can be set) added: diskspace warning. When free diskspace drops below a given threshold (4GB by default), a warning message will appear changed: new background image, minor design changes changed: log file can be easily generated and downloaded by clicking a button (update&info tab)","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#2022-05-19-documentation","text":"changed: overall structure --> the OpenScan2 repository will serve as a central hub for all informations concerning OpenScan (i.e. firmware, hardware, tutorials ...)","title":"2022-05-19 documentation"},{"location":"changelog/#2022-05-11-beta","text":"added: changelog and version (finally ;) added: create an update using the node-red-backend inject node (\"create beta\" and \"prepare image creation\" in \"update\" tab) fixed: Error handling in flask (when no preview is taken) fixed: Error when upload failed + node red restarted (multiple instances of curl) fixed: When closing the browser session/missing the popup after the routine, the data set got lost (if this happens, just restart the device and it will be moved to the right location)","title":"2022-05-11 beta"},{"location":"changelog/#2022-04-26-beta","text":"added: donation button ;) fixed: the wonderful camera position algorithm was faulty and a bit inefficient fixed: downscaling the preview image caused the preview to disappear (when crop value was to high) fixed: delay_before and delay_after are now properly applied, so that you can set a delay before/after taking a photo fixed: updates might crash the selected camera --> it is now necessary to re-select the camera after certain updates","title":"2022-04-26 beta"},{"location":"changelog/#2022-04-21-beta","text":"added: timer (ETA) until a routine is done added: showing progress, while files are being split (before uploading to OpenScanCloud) added: infotexts (FINALLY :) added: several stats/device information fixed: combining two sets did not delete the smaller set","title":"2022-04-21 beta"},{"location":"changelog/#2022-04-20-beta-main","text":"!fixed: pi cameras (v1.3, v2.1 and HQ) finally work and can be simply selected in the settings menu !fixed: Raspberry Pi 3B+ and 4 work! (the main limiting factor now is the RAM, where at least 1GB RAM is needed) fixed: live preview sometimes did not work. This has been a network speed issue and has been solved by downscaling the image (resolution can be set) fixed: it is now possible to delete individual sets. fixed: it is now possible to use all LEDs. added: Turntable mode (disable the second axis) added: Pause scan. You can pause and un-pause the scan by simply pressing the button added: second scan pass. When one scan is done, you can immediately run a second pass. This is especially useful, if you want to re-orient the object added: auto-timeout. Turn off the ringlight (todo: and motors) after 300 seconds (value can be set) added: diskspace warning. When free diskspace drops below a given threshold (4GB by default), a warning message will appear changed: new background image, minor design changes changed: log file can be easily generated and downloaded by clicking a button (update&info tab)","title":"2022-04-20 beta &amp; main"},{"location":"downloads/","text":"TODO Add download links for - printable files Mini + Classic - PCB schematics - Manual.pdf (?) - ...","title":"Downloads"},{"location":"downloads/#todo","text":"Add download links for - printable files Mini + Classic - PCB schematics - Manual.pdf (?) - ...","title":"TODO"},{"location":"firmware/setup/","text":"Firmware - Setup Overview It is necessary to use a Raspberry Pi with at least 1GB of RAM to run the firmware. So far, the firmware has been tested on Raspberry Pi 3B+ and 4B variants. (but it might work on other versions) The easiest way is to download the latest Raspbian image and flash your micro sd card as described here . Alternatively you can set-up the firmware manually by following this guide . Flashing the SD Card using the Raspberry Pi Imager I have pre-compiled a working Raspbian Image (2022-07-08), that can be downloaded from Google Drive (1.5GB) (working flawlessly on Raspberry Pi 3b+ and 4) Download and flash the Raspbian Image to your Micro SD Card using the Raspberry Pi Imager Manually installing and setting up your Raspberry Pi The firmware and following installation guide is optimized for Raspbian Bullseye with Desktop environment, but can also be used headless (Note, that the desktop version comes with some libraries that you will otherwise need to install manually). Raspi-config sudo raspi-config --> performance options --> GPU --> change to 256 Increase GPU memory, which helps processing the captured photos --> localization settings --> wlan country --> your country Change the WLAN settings, so that device works in your area Save and reboot now (or later ;) Folder structure Create directories mkdir /home/pi/OpenScan/ /home/pi/OpenScan/scans /home/pi/OpenScan/files /home/pi/OpenScan/settings /home/pi/OpenScan/tmp /home/pi/OpenScan/updates WLAN settings Open the settings file sudo nano /etc/network/interfaces And add to the end: auto wlan0 iface wlan0 inet manual wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf Samba (optional but highly recommended) Create a shared network drive, so that you can easily access the Raspberry Pi's filesystem. It enables you to upload custom datasets to the OpenScanCloud through the browser interface. Simply copy a zip file containing your photos to the ../OpenScan/scans directory. Install the package sudo apt-get install samba samba-common-bin Open the configuration file sudo nano /etc/samba/smb.conf And change the following lines: read only = no create mask = 0775 directory mask = 0775 Add the following line, if you are using Windows: wins support = yes And add to the end of the file: [PiShare] comment=Raspberry Pi Share path=/home/pi/ browseable=Yes writeable=Yes only guest=no create mask=0777 directory mask=0777 public=yes Set a password for user pi (by default I use password raspberry ) sudo smbpasswd -a pi And add rights: sudo chmod -R 777 /home/pi/OpenScan Gphoto Necessary to controll DSLR cameras connected by USB cable. sudo apt install libgphoto2-dev gphoto2 sudo pip3 install -v gphoto2 NodeRed Download and install: bash <(curl -sL https://raw.githubusercontent.com/node-red/linux-installers/master/deb/update-nodejs-and-nodered) --> confirm with yes and yes :) Open node-red daemon file: sudo nano /lib/systemd/system/nodered.service add to the section [Unit] Wants=network.target flask.service After=flask.service and change the following lines under [Service] to run nodered as root: User = root #Group = pi Initialize node-red: sudo node-red admin init settings file: /root/.node-red/settings.js Security: No Project: No Flows File Settings: Enter Passphrase: Enter Theme: default Text editor: default External Modules: Yes Open node-red settings file: sudo nano /root/.node-red/settings.js And find, uncomment and change the following parameters: userDir: '/home/pi/OpenScan/settings/.node-red/', uiPort: process.env.PORT || 80, httpAdminRoot: '/editor', httpStatic: '/home/pi/OpenScan/', ui: { path: \"\" }, functionGlobalContext: { // enables and pre-populates the context.global variable os:require('os'), path:require('path'), fs:require('fs') }, Enable nodered daemon and restart the device: sudo systemctl enable nodered.service sudo reboot -h Open the node-red settings directory: cd /home/pi/OpenScan/settings/.node-red/ And run the following command to install some additional palettes to node-red sudo npm i node-red-dashboard && sudo npm i node-red-contrib-python3-function && sudo npm i node-red-node-ui-table node-red-restart Libcamera - to run Arducam IMX519 (and other non-Raspberry-Pi camera moduls) See Arducam.com for more details Download all necessary files wget -O install_pivariety_pkgs.sh https://github.com/ArduCAM/Arducam-Pivariety-V4L2-Driver/releases/download/install_script/install_pivariety_pkgs.sh && chmod +x install_pivariety_pkgs.sh sudo apt update ./install_pivariety_pkgs.sh -p libcamera_dev ./install_pivariety_pkgs.sh -p libcamera_apps ./install_pivariety_pkgs.sh -p imx519_kernel_driver Download OpenScan Firmware Custom node red flows (browser interface): sudo wget https://raw.githubusercontent.com/OpenScanEu/OpenScan2/main/update/main/flows.json -O /home/pi/OpenScan/settings/.node-red/flows.json Some Python functions used by the firmware: sudo wget https://raw.githubusercontent.com/OpenScanEu/OpenScan2/main/update/main/OpenScan.py -O /usr/lib/python3/dist-packages/OpenScan.py A local server providing several functions (flask): sudo wget https://raw.githubusercontent.com/OpenScanEu/OpenScan2/main/update/main/fla.py -O /home/pi/OpenScan/files/fla.py Custom config.txt file, which is needed to use different camera moduls (especially IMX519): sudo wget https://raw.githubusercontent.com/OpenScanEu/OpenScan2/main/update/main/config.txt -O /boot/config.txt Arducam's camera focus script for the IMX519 sensor: sudo wget https://raw.githubusercontent.com/OpenScanEu/OpenScan2/main/update/main/Arducam.py -O /usr/lib/python3/dist-packages/Arducam.py And the OpenScan Logo to have a nice background: sudo wget https://raw.githubusercontent.com/OpenScanEu/OpenScan2/main/update/files/logo.jpg -O /home/pi/OpenScan/files/logo.jpg Enable Flask local server: create and open the service file: sudo nano /lib/systemd/system/flask.service with the following content: [Unit] Description=photo service After=multi-user.target [Service] #ExecStartPre=/bin/sleep 5 ExecStart=/usr/bin/python3 /home/pi/OpenScan/files/fla.py StandardOutput=inherit StandardError=inherit Restart=always RestartSec=5 User=root [Install] WantedBy=multi-user.target Enable and start the service: sudo systemctl daemon-reload && sudo systemctl enable flask.service && sudo systemctl start flask.service others add to /boot/config.txt to disable display which causes some issues --> WHY??? hdmi_blanking=2","title":"Setup"},{"location":"firmware/setup/#firmware-setup","text":"","title":"Firmware - Setup"},{"location":"firmware/setup/#overview","text":"It is necessary to use a Raspberry Pi with at least 1GB of RAM to run the firmware. So far, the firmware has been tested on Raspberry Pi 3B+ and 4B variants. (but it might work on other versions) The easiest way is to download the latest Raspbian image and flash your micro sd card as described here . Alternatively you can set-up the firmware manually by following this guide .","title":"Overview"},{"location":"firmware/setup/#flashing-the-sd-card-using-the-raspberry-pi-imager","text":"I have pre-compiled a working Raspbian Image (2022-07-08), that can be downloaded from Google Drive (1.5GB) (working flawlessly on Raspberry Pi 3b+ and 4) Download and flash the Raspbian Image to your Micro SD Card using the Raspberry Pi Imager","title":"Flashing the SD Card using the Raspberry Pi Imager"},{"location":"firmware/setup/#manually-installing-and-setting-up-your-raspberry-pi","text":"The firmware and following installation guide is optimized for Raspbian Bullseye with Desktop environment, but can also be used headless (Note, that the desktop version comes with some libraries that you will otherwise need to install manually).","title":"Manually installing and setting up your Raspberry Pi"},{"location":"firmware/setup/#raspi-config","text":"sudo raspi-config --> performance options --> GPU --> change to 256 Increase GPU memory, which helps processing the captured photos --> localization settings --> wlan country --> your country Change the WLAN settings, so that device works in your area Save and reboot now (or later ;)","title":"Raspi-config"},{"location":"firmware/setup/#folder-structure","text":"Create directories mkdir /home/pi/OpenScan/ /home/pi/OpenScan/scans /home/pi/OpenScan/files /home/pi/OpenScan/settings /home/pi/OpenScan/tmp /home/pi/OpenScan/updates","title":"Folder structure"},{"location":"firmware/setup/#wlan-settings","text":"Open the settings file sudo nano /etc/network/interfaces And add to the end: auto wlan0 iface wlan0 inet manual wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf","title":"WLAN settings"},{"location":"firmware/setup/#samba-optional-but-highly-recommended","text":"Create a shared network drive, so that you can easily access the Raspberry Pi's filesystem. It enables you to upload custom datasets to the OpenScanCloud through the browser interface. Simply copy a zip file containing your photos to the ../OpenScan/scans directory. Install the package sudo apt-get install samba samba-common-bin Open the configuration file sudo nano /etc/samba/smb.conf And change the following lines: read only = no create mask = 0775 directory mask = 0775 Add the following line, if you are using Windows: wins support = yes And add to the end of the file: [PiShare] comment=Raspberry Pi Share path=/home/pi/ browseable=Yes writeable=Yes only guest=no create mask=0777 directory mask=0777 public=yes Set a password for user pi (by default I use password raspberry ) sudo smbpasswd -a pi And add rights: sudo chmod -R 777 /home/pi/OpenScan","title":"Samba (optional but highly recommended)"},{"location":"firmware/setup/#gphoto","text":"Necessary to controll DSLR cameras connected by USB cable. sudo apt install libgphoto2-dev gphoto2 sudo pip3 install -v gphoto2","title":"Gphoto"},{"location":"firmware/setup/#nodered","text":"Download and install: bash <(curl -sL https://raw.githubusercontent.com/node-red/linux-installers/master/deb/update-nodejs-and-nodered) --> confirm with yes and yes :) Open node-red daemon file: sudo nano /lib/systemd/system/nodered.service add to the section [Unit] Wants=network.target flask.service After=flask.service and change the following lines under [Service] to run nodered as root: User = root #Group = pi Initialize node-red: sudo node-red admin init settings file: /root/.node-red/settings.js Security: No Project: No Flows File Settings: Enter Passphrase: Enter Theme: default Text editor: default External Modules: Yes Open node-red settings file: sudo nano /root/.node-red/settings.js And find, uncomment and change the following parameters: userDir: '/home/pi/OpenScan/settings/.node-red/', uiPort: process.env.PORT || 80, httpAdminRoot: '/editor', httpStatic: '/home/pi/OpenScan/', ui: { path: \"\" }, functionGlobalContext: { // enables and pre-populates the context.global variable os:require('os'), path:require('path'), fs:require('fs') }, Enable nodered daemon and restart the device: sudo systemctl enable nodered.service sudo reboot -h Open the node-red settings directory: cd /home/pi/OpenScan/settings/.node-red/ And run the following command to install some additional palettes to node-red sudo npm i node-red-dashboard && sudo npm i node-red-contrib-python3-function && sudo npm i node-red-node-ui-table node-red-restart","title":"NodeRed"},{"location":"firmware/setup/#libcamera-to-run-arducam-imx519-and-other-non-raspberry-pi-camera-moduls","text":"See Arducam.com for more details Download all necessary files wget -O install_pivariety_pkgs.sh https://github.com/ArduCAM/Arducam-Pivariety-V4L2-Driver/releases/download/install_script/install_pivariety_pkgs.sh && chmod +x install_pivariety_pkgs.sh sudo apt update ./install_pivariety_pkgs.sh -p libcamera_dev ./install_pivariety_pkgs.sh -p libcamera_apps ./install_pivariety_pkgs.sh -p imx519_kernel_driver","title":"Libcamera - to run Arducam IMX519 (and other non-Raspberry-Pi camera moduls)"},{"location":"firmware/setup/#download-openscan-firmware","text":"Custom node red flows (browser interface): sudo wget https://raw.githubusercontent.com/OpenScanEu/OpenScan2/main/update/main/flows.json -O /home/pi/OpenScan/settings/.node-red/flows.json Some Python functions used by the firmware: sudo wget https://raw.githubusercontent.com/OpenScanEu/OpenScan2/main/update/main/OpenScan.py -O /usr/lib/python3/dist-packages/OpenScan.py A local server providing several functions (flask): sudo wget https://raw.githubusercontent.com/OpenScanEu/OpenScan2/main/update/main/fla.py -O /home/pi/OpenScan/files/fla.py Custom config.txt file, which is needed to use different camera moduls (especially IMX519): sudo wget https://raw.githubusercontent.com/OpenScanEu/OpenScan2/main/update/main/config.txt -O /boot/config.txt Arducam's camera focus script for the IMX519 sensor: sudo wget https://raw.githubusercontent.com/OpenScanEu/OpenScan2/main/update/main/Arducam.py -O /usr/lib/python3/dist-packages/Arducam.py And the OpenScan Logo to have a nice background: sudo wget https://raw.githubusercontent.com/OpenScanEu/OpenScan2/main/update/files/logo.jpg -O /home/pi/OpenScan/files/logo.jpg","title":"Download OpenScan Firmware"},{"location":"firmware/setup/#enable-flask-local-server","text":"create and open the service file: sudo nano /lib/systemd/system/flask.service with the following content: [Unit] Description=photo service After=multi-user.target [Service] #ExecStartPre=/bin/sleep 5 ExecStart=/usr/bin/python3 /home/pi/OpenScan/files/fla.py StandardOutput=inherit StandardError=inherit Restart=always RestartSec=5 User=root [Install] WantedBy=multi-user.target Enable and start the service: sudo systemctl daemon-reload && sudo systemctl enable flask.service && sudo systemctl start flask.service","title":"Enable Flask local server:"},{"location":"firmware/setup/#others","text":"add to /boot/config.txt to disable display which causes some issues --> WHY??? hdmi_blanking=2","title":"others"},{"location":"firmware/usage/","text":"How to use the OpenScan Firmware TLDR Add your wifi credentials to wpa_supplicant.conf in the /boot/ directory of the SD card OR connect the device to your router with an Ethernet cable connect the device to a 12V power source and start booting after 1-2 mins, access http://openscan/ on a device, which is connected to the same network (alternatively, you can connect to http:// + IP with the local IP of the device) enter the model and camera type optional: open settings menu and request & insert the OpenScanCloud token open Scan menu, turn on the ringlight, adjust the brightness, crop unneeded background and make a first dataset of 50-100 photos download the photos to your PC in the Files&Cloud menu (alternatively, upload the dataset to OpenScanCloud for processing) Connecting to the device for the first time By ethernet It is highly recommended to use an Ethernet cable for the first start and add Wi-Fi credentials in settings menu later (see ...). To do so, connect the Raspberry Pi to your router using an Ethernet cable. Skip the next step. By wifi Insert the Micro-SD card into your computer and open the boot -directory. Find and open the file wpa_supplicant.conf Change the country code according to your location (see Wikipedia - ISO3166-1 alpha-2 country codes ) and change your Network name (SSID) and Wifi-Password (psk): Double-check your SSID and psk! Seriously! ;) Save the file and unmount the Micro-SD card from your computer. Accessing the user-interface Insert the Micro-SD card into the Raspberry Pi and power up the device. The first boot will take 2-3 minutes. The LED ring light will blink several times after successfully starting the scanner. You will be able to access the scanner's interface from any device in the same network. Open any browser and follow this link: http://openscan/ , which will open the following start screen: Note: It is highly recommended (but not necessary) to allow internet access in order to get the latest updates and/or use the free OpenScanCloud processing pipeline. Alternatively, you can deactivate internet access in your router's settings and use the scanner locally. The scanner will automatically check, if new updates are available. Before continuing, make sure to install updates by clicking the button. The device will reboot. Select camera and scanner model Select the scanner's model from the dropdown menu: OpenScan Classic OpenScan Mini Select the camera from the dropdown menu: Pi Camera v1, v2, HQ, Arducam IMX519, IMX290, IMX378, OV9281 are connected through the ribbon cable. If you encounter any issues, please check the cable's orientation! DSLR (gphoto) - can be used with a wide range of cameras, which can be connected and controlled via USB. Check GPhoto if your camera is supported. External Camera - Can be used to connect your camera trigger to the GPIO pins on the front of the pi shield. This can be used with any (modified) remote shutter release, and thus it is possible to use Smartphones, DSLR and compact cameras After selecting camera and model, you should restart the device one final time ;) Now, the shown start screen will appear in its full glory showing all available sub-menus. You can navigate the menu by expanding the navigation bar on the top left: You are ready to start scanning :) But before you do so, please open the settings menu in order to customize the device to your needs and use its full potential! Settings Menu Note that there are small Info buttons in every column, which will open a pop-up window with additional information SSH If you do not intend to access the device by terminal, please deactivate ssh. If you want to use ssh, please use the following credentials to login and change the password immediately! (default user: pi, password: raspberry) Samba Samba is a local filesharing server, which allows accessing the files on the device directly from your computer. This can be used to manage the image sets in your file browser. Additionally, you can upload zip files containing image sets from your computer to the Raspberry Pi in order to use the OpenScanCloud processing pipeline. If you do not intend to use this feature, please deactivate samba. Please change the default password by running the following command (default user: pi, password: raspberry): sudo smbpasswd -a pi Copy the following address to your file browser in order to access the local files: \\\\openscan\\PiShare\\OpenScan\\scans OpenScanCloud In order to use the free/donation-based OpenScanCloud, you first have to read & agree to the Terms of use. The only requirement is an individual token, which is a 32-digit individual key, which you can easily get through the user interface. In order to get such a token you need to hit register and enter your e-mail address, first and family name. The token will be sent to the given mail within one or two days. Please check your spam folder! As soon as you enter a token, it will be verified and you can see your individual \"limits\" Each token comes with a given amount of 'credit' which is another measure against spam. The given number in Gigabyte indicates the amount of data, that you can process on the servers. IMPORTANT: The credit can be increased at any time by sending a mail to cloud@openscan.eu Network - Hostname If you use multiple OpenScan devices in the same network, it is quite useful to give every scanner its individual name ;) Advanced settings There are a ton of additional settings, which you can modify. Note, that for the OpenScan Classic & Mini, you do not need to touch any of those settings. SCAN Finally! Time to start scanning :) set the projectname Place the prepared object on the turntable ( please follow how to get good scanning results , to properly prepare your object and setup and avoid disappointing results :) ) Turn on the ring light when using the OpenScan Classic: move the camera close to the object adjust the shutter speed, so that there are no over- or underexposed areas crop the image, so that the amount of visible background is minimal 70 - 100 photos are more than enough for almost all objects. If the result is bad, 200 photos won't improve it significantly ;) Start the routine Pause, unpause or stop the routine if you need to After the scan is done, you can choose, whether you want to do a second pass, with a different object orientation or finish the scan. Once finished, the image set can be accessed in the Files&Cloud menu. HOW TO GET GOOD SCANNING RESULTS Whether a scanning result will be good or bad is fully determined before even starting the scan. Especially metal and plastic parts will need some kind of preparation (i.e. chalk or scanning spray). Please read the following guide and understand the basic principles depicted here Openscan.eu/photogrammetry Troubleshooting What is the starting position for the rotor Please understand the coordinate-system used here. The following image shows the 0\u00b0-position and you can set the starting position of the rotor in the settings menu/motor tab (advanced settings) The motor moves to fast lower the acceleration in the settings menu/motor tab (advanced settings) increase the motor delay (advanced settings) The images are out of focus in case of Arducam: use manual focus mode in case of Pi Camera: re-focus the camera using the focus adjustment tool The scanner does not cover the whole object change the min/max angle in the motor rotor settings (advanced settings) when pressing up, the rotor is moving down invert the motor by either flipping the motor cable's connector 180\u00b0 (after powering off the device!!) or change the motor's direction in the motor settings menu (advanced settings) I do not want the fancy scan routine and instead use the turntable only activate the turntable mode in the motor settings (advanced settings), which will deactivate the rotor FILES & CLOUD UPDATE & INFO Backend (node-red) You can access the backend/programming interface Node-red through the following link http://openscan/editor","title":"Usage"},{"location":"firmware/usage/#how-to-use-the-openscan-firmware","text":"","title":"How to use the OpenScan Firmware"},{"location":"firmware/usage/#tldr","text":"Add your wifi credentials to wpa_supplicant.conf in the /boot/ directory of the SD card OR connect the device to your router with an Ethernet cable connect the device to a 12V power source and start booting after 1-2 mins, access http://openscan/ on a device, which is connected to the same network (alternatively, you can connect to http:// + IP with the local IP of the device) enter the model and camera type optional: open settings menu and request & insert the OpenScanCloud token open Scan menu, turn on the ringlight, adjust the brightness, crop unneeded background and make a first dataset of 50-100 photos download the photos to your PC in the Files&Cloud menu (alternatively, upload the dataset to OpenScanCloud for processing)","title":"TLDR"},{"location":"firmware/usage/#connecting-to-the-device-for-the-first-time","text":"","title":"Connecting to the device for the first time"},{"location":"firmware/usage/#by-ethernet","text":"It is highly recommended to use an Ethernet cable for the first start and add Wi-Fi credentials in settings menu later (see ...). To do so, connect the Raspberry Pi to your router using an Ethernet cable. Skip the next step.","title":"By ethernet"},{"location":"firmware/usage/#by-wifi","text":"Insert the Micro-SD card into your computer and open the boot -directory. Find and open the file wpa_supplicant.conf Change the country code according to your location (see Wikipedia - ISO3166-1 alpha-2 country codes ) and change your Network name (SSID) and Wifi-Password (psk): Double-check your SSID and psk! Seriously! ;) Save the file and unmount the Micro-SD card from your computer.","title":"By wifi"},{"location":"firmware/usage/#accessing-the-user-interface","text":"Insert the Micro-SD card into the Raspberry Pi and power up the device. The first boot will take 2-3 minutes. The LED ring light will blink several times after successfully starting the scanner. You will be able to access the scanner's interface from any device in the same network. Open any browser and follow this link: http://openscan/ , which will open the following start screen: Note: It is highly recommended (but not necessary) to allow internet access in order to get the latest updates and/or use the free OpenScanCloud processing pipeline. Alternatively, you can deactivate internet access in your router's settings and use the scanner locally. The scanner will automatically check, if new updates are available. Before continuing, make sure to install updates by clicking the button. The device will reboot.","title":"Accessing the user-interface"},{"location":"firmware/usage/#select-camera-and-scanner-model","text":"Select the scanner's model from the dropdown menu: OpenScan Classic OpenScan Mini Select the camera from the dropdown menu: Pi Camera v1, v2, HQ, Arducam IMX519, IMX290, IMX378, OV9281 are connected through the ribbon cable. If you encounter any issues, please check the cable's orientation! DSLR (gphoto) - can be used with a wide range of cameras, which can be connected and controlled via USB. Check GPhoto if your camera is supported. External Camera - Can be used to connect your camera trigger to the GPIO pins on the front of the pi shield. This can be used with any (modified) remote shutter release, and thus it is possible to use Smartphones, DSLR and compact cameras After selecting camera and model, you should restart the device one final time ;) Now, the shown start screen will appear in its full glory showing all available sub-menus. You can navigate the menu by expanding the navigation bar on the top left: You are ready to start scanning :) But before you do so, please open the settings menu in order to customize the device to your needs and use its full potential!","title":"Select camera and scanner model"},{"location":"firmware/usage/#settings-menu","text":"Note that there are small Info buttons in every column, which will open a pop-up window with additional information","title":"Settings Menu"},{"location":"firmware/usage/#ssh","text":"If you do not intend to access the device by terminal, please deactivate ssh. If you want to use ssh, please use the following credentials to login and change the password immediately! (default user: pi, password: raspberry)","title":"SSH"},{"location":"firmware/usage/#samba","text":"Samba is a local filesharing server, which allows accessing the files on the device directly from your computer. This can be used to manage the image sets in your file browser. Additionally, you can upload zip files containing image sets from your computer to the Raspberry Pi in order to use the OpenScanCloud processing pipeline. If you do not intend to use this feature, please deactivate samba. Please change the default password by running the following command (default user: pi, password: raspberry): sudo smbpasswd -a pi Copy the following address to your file browser in order to access the local files: \\\\openscan\\PiShare\\OpenScan\\scans","title":"Samba"},{"location":"firmware/usage/#openscancloud","text":"In order to use the free/donation-based OpenScanCloud, you first have to read & agree to the Terms of use. The only requirement is an individual token, which is a 32-digit individual key, which you can easily get through the user interface. In order to get such a token you need to hit register and enter your e-mail address, first and family name. The token will be sent to the given mail within one or two days. Please check your spam folder! As soon as you enter a token, it will be verified and you can see your individual \"limits\" Each token comes with a given amount of 'credit' which is another measure against spam. The given number in Gigabyte indicates the amount of data, that you can process on the servers. IMPORTANT: The credit can be increased at any time by sending a mail to cloud@openscan.eu","title":"OpenScanCloud"},{"location":"firmware/usage/#network-hostname","text":"If you use multiple OpenScan devices in the same network, it is quite useful to give every scanner its individual name ;)","title":"Network - Hostname"},{"location":"firmware/usage/#advanced-settings","text":"There are a ton of additional settings, which you can modify. Note, that for the OpenScan Classic & Mini, you do not need to touch any of those settings.","title":"Advanced settings"},{"location":"firmware/usage/#scan","text":"Finally! Time to start scanning :) set the projectname Place the prepared object on the turntable ( please follow how to get good scanning results , to properly prepare your object and setup and avoid disappointing results :) ) Turn on the ring light when using the OpenScan Classic: move the camera close to the object adjust the shutter speed, so that there are no over- or underexposed areas crop the image, so that the amount of visible background is minimal 70 - 100 photos are more than enough for almost all objects. If the result is bad, 200 photos won't improve it significantly ;) Start the routine Pause, unpause or stop the routine if you need to After the scan is done, you can choose, whether you want to do a second pass, with a different object orientation or finish the scan. Once finished, the image set can be accessed in the Files&Cloud menu.","title":"SCAN"},{"location":"firmware/usage/#how-to-get-good-scanning-results","text":"Whether a scanning result will be good or bad is fully determined before even starting the scan. Especially metal and plastic parts will need some kind of preparation (i.e. chalk or scanning spray). Please read the following guide and understand the basic principles depicted here Openscan.eu/photogrammetry","title":"HOW TO GET GOOD SCANNING RESULTS"},{"location":"firmware/usage/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"firmware/usage/#what-is-the-starting-position-for-the-rotor","text":"Please understand the coordinate-system used here. The following image shows the 0\u00b0-position and you can set the starting position of the rotor in the settings menu/motor tab (advanced settings)","title":"What is the starting position for the rotor"},{"location":"firmware/usage/#the-motor-moves-to-fast","text":"lower the acceleration in the settings menu/motor tab (advanced settings) increase the motor delay (advanced settings)","title":"The motor moves to fast"},{"location":"firmware/usage/#the-images-are-out-of-focus","text":"in case of Arducam: use manual focus mode in case of Pi Camera: re-focus the camera using the focus adjustment tool","title":"The images are out of focus"},{"location":"firmware/usage/#the-scanner-does-not-cover-the-whole-object","text":"change the min/max angle in the motor rotor settings (advanced settings)","title":"The scanner does not cover the whole object"},{"location":"firmware/usage/#when-pressing-up-the-rotor-is-moving-down","text":"invert the motor by either flipping the motor cable's connector 180\u00b0 (after powering off the device!!) or change the motor's direction in the motor settings menu (advanced settings)","title":"when pressing up, the rotor is moving down"},{"location":"firmware/usage/#i-do-not-want-the-fancy-scan-routine-and-instead-use-the-turntable-only","text":"activate the turntable mode in the motor settings (advanced settings), which will deactivate the rotor","title":"I do not want the fancy scan routine and instead use the turntable only"},{"location":"firmware/usage/#files-cloud","text":"","title":"FILES &amp; CLOUD"},{"location":"firmware/usage/#update-info","text":"","title":"UPDATE &amp; INFO"},{"location":"firmware/usage/#backend-node-red","text":"You can access the backend/programming interface Node-red through the following link http://openscan/editor","title":"Backend (node-red)"},{"location":"guideline/report_bug/","text":"How to create an issue on GitHub Did you find an annoying bug or have a great idea on how to improve OpenScan. No matter if it is just a misaligned text in the firmware or a revolutionary new scanner design that you want to share. You can simply create an issue in the according repository (see below). For the following steps a free GitHub account is needed: Navigate to the right repository: Choose the right repository from the following list and open it in a new tab: Documentation Firmware CAD PCB OpenScanCloud Look through the existing issues: Navigate to Issues (1) Use the search/filter to check if there is already a solution to the problem (e.g. \"cloud\") (2) Please take some time to read the existing issues/solutions carefully If needed, continue to create a new issue (3) Create a new issue: Choose one of the existing templates (e.g. missing dokumentation, bug report, feature request, design idea ...) Use the given structure as much as possible (but feel free to deviate from it as needed). You can add photos/screenshots and even videos. Try to be as specific as possible. Submit the issue Note, that it does not really help, if the issue is published on other plattforms, as all development is coordinated here on Github. You will be notified by mail as soon as the status of the issue changes (e.g. someone needs more details). Please take the time to follow-up on your initial request. Inactive issues will be closed after 30 days A final, but very important note: (Unfortunately) there is no payed developer team behind this project (yet ;) and it is maintained by a group of enthusiasts in their free time. So please bare this in mind, when submitting any kind of issue.","title":"Bug&Feature"},{"location":"guideline/report_bug/#how-to-create-an-issue-on-github","text":"Did you find an annoying bug or have a great idea on how to improve OpenScan. No matter if it is just a misaligned text in the firmware or a revolutionary new scanner design that you want to share. You can simply create an issue in the according repository (see below). For the following steps a free GitHub account is needed:","title":"How to create an issue on GitHub"},{"location":"guideline/report_bug/#navigate-to-the-right-repository","text":"Choose the right repository from the following list and open it in a new tab: Documentation Firmware CAD PCB OpenScanCloud","title":"Navigate to the right repository:"},{"location":"guideline/report_bug/#look-through-the-existing-issues","text":"Navigate to Issues (1) Use the search/filter to check if there is already a solution to the problem (e.g. \"cloud\") (2) Please take some time to read the existing issues/solutions carefully If needed, continue to create a new issue (3)","title":"Look through the existing issues:"},{"location":"guideline/report_bug/#create-a-new-issue","text":"Choose one of the existing templates (e.g. missing dokumentation, bug report, feature request, design idea ...) Use the given structure as much as possible (but feel free to deviate from it as needed). You can add photos/screenshots and even videos. Try to be as specific as possible. Submit the issue Note, that it does not really help, if the issue is published on other plattforms, as all development is coordinated here on Github. You will be notified by mail as soon as the status of the issue changes (e.g. someone needs more details). Please take the time to follow-up on your initial request. Inactive issues will be closed after 30 days A final, but very important note: (Unfortunately) there is no payed developer team behind this project (yet ;) and it is maintained by a group of enthusiasts in their free time. So please bare this in mind, when submitting any kind of issue.","title":"Create a new issue:"},{"location":"hardware/OpenScanClassic/","text":"OpenScan Classic Overview The OpenScan Classic is a compact desktop 3D scanner capable of scanning objects up to ~16 cm with an accuracy of up to 0.02 mm. The frame can be fully 3d printed, and all other components are off-the-shelf parts. You should be able to source all parts locally, or chose to support the OpenScan project by ordering (some) parts through Openscan.eu/shop . Currently, the following cameras can be used without any additional modifications: Arducam IMX519 16mp & autofocus, Pi Camera v2 8mp and Pi Camera v1.3 5mp, where the Arducam IMX519 has to be considered the gold standard (for now :). Alternatively, you can even use many DSLR cameras, which can be connected and controlled through the Raspberry Pis USB interface... Bill of material (BOM) x M3x8 Screws x M3x12 Screws x M3 Nuts 1x Pi Shield 1x Nema 17 (>40Ncm) 1x Nema 17 (>13Ncm) 1x Raspberry Pi 3B+ or 4 (any) 1x Micro SD Card (>16GB) 1x Camera Ribbon Cable 15cm 1x Ringlight 1x Camera Module IMX519 (alternatively Pi Camera V2 or V1.3) or DSLR camera 2x M2x6 Nylon Screw 2x M2x6 Nylon Standoff 2x M2 Nuts (2x M2x12 Nylon Screw if you use the Pi Camera module) 3d printed parts: TODO 3D Printing Get the printable .stl (and design) files TODO Assembly Control module IMPORTANT: Skip this step until \"prepare control module\" if you intend to use external cameras only Make sure to follow the right setup for your camera module (either Arducam IMX519 or PiCamera V1.3/V2) Arducam IMX519 16mp with Autofocus 1x Ringlight PCB 1x Arducam IMX519 16mp camera module 2x M2x6 screws 2x M2x6 standoffs 2x M2 nuts See the sequence of the parts: Make sure that the lens is properly centered (looking at the ringlight from the front as shown in the right image): Pi Camera v2.1 or v1.3 1x Ringlight PCB Pi Camera v2.1 or v1.3 module 2x M2x12 screws 2x spacer 2x M2 nuts See the sequence of the parts: Prepare control module Control Module: Use 8x M3x8 screws to mount the ringlight module and the Pi Shield in the following way: Connect the ringlight module and the pi shield with the 50cm ringlight cable, connect the motor cables: Use the 15cm camera ribbon cable to connect the Raspberry Pi and the camera. Make sure that the ribbon cables side with the metal pins is facing away from the USB ports of the Raspberry Pi.: Make sure to properly align the Raspberry Pi with the Pin headers on the Pi Shield. Misalignment might destroy both the Raspberry Pi and the Pi Shield! : Your control module is ready to use and should look something like: Main Frame Attach large motor Stand1_Nema_17.stl Nema 17 (min. 40Ncm) M3x8mm (4x) Gear_Small.stl (optional v2) (left) Mount the stepper motor with four M3x8mm Screws onto the Stand1.stl. (right) Press the Gear_small.stl onto the motor shaft. Make sure, that the gear and the motor shaft close flush at the front. Note: Depending on the printing accuracy, it may be necessary to pre-drill the screw holes with a 3mm drill bit. Furthermore the gear and the motor shaft might have a tight fit and you might have to \u201egently\u201c use the help of a hammer. Mount reduction gears Stand1_Nema_17.stl (after Step 4a) Adapter2.stl Steel pin (d=6mm, l>50mm) (left) The steel pin is pressed into the opening of the side stand. You can use a cordless screwdriver to \"drill\" the pin into the opening. (middle) The larger gear (Adapter2.stl) is pressed onto the steel pin. (right) The steel pin (top) and the motor shaft must NOT protrude forward from the components and should be flush with the surface. Superglue can be used to fix the position of the gears. Note: Both gears should match well and rotate relatively resistance free. If this is not the case, it may be necessary to replace the small gear with v2.stl or adjust the printer settings. Prepare Stand2 Stand2.stl Adapter1.stl Steel pin (d=6mm, l>50mm) (left) The steel pin is pressed into the opening of the side stand. You can use a cordless screwdriver to \"drill\" the pin into the opening. (right) The adapter1.stl is pressed onto the steel pin. It is important to ensure that the steel pin does not protrude forward from the adapter. Note: The adapter can be fixed with superglue on the steel pin. It must be ensured that the steel pin can rotate freely in the stand. Prepare Turntable Turntable_Base_small.stl Nema 17 (min. 13Ncm, optional >40Ncm) M3x8mm (4x) Rotary_Arm.stl (2x) Turntable_Adapter.stl Mount the Nema 17 on Turntable_Base_small.stl using four M3x8mm screws: Place the Rotary Arm (2x) on the sides of the turntable_base.stl (red mark) and press any Turntable_Adapter.stl onto the motor shaft: The connections marked red can be fixed with super glue if they are too loose. Tilting mechanism Stand 1 (after step 4b) Stand 2 (after step 5) Turntable_Base_small.stl (after step 6) M3x12mm (2x) Combine all prepared parts as shown: The height of the turntable has to be adapted for each scan object. Optimal height: Object to high (left) and to low (right): Insert two M3x12mm screws laterally into the adapters (red mark), so as to connect the side stands with the rotating arm (Turntable_Base + Rotary_Arm). Wiring the motors Control unit (after step 3) Tilting mechanism (after step 7/8) Stepper motor cable >70cm (2x) Connect the motors to the control unit: Whole Setup PiCamera/Arducam TODO add image of the whole setup External Camera (via USB) TODO add image of the whole setup You can directly connect a camera via USB and use the OpenScan web interface to preview and capture photos automatically. . The functionality is based on the great GPhoto2 Library (see gphoto.org ) and the number of supported cameras is huge. NOTE: some cameras need to be set to a different operating mode (PTP mode). See this list on gphoto.org to check whether your camera is supported. It is necassary that Image Capture and Liveview are listed. External Camera (via Opto) TODO add image of the whole setup Remote shutter release (I) For (almost) all cameras you can buy a relatively cheap remote shutter release. These modules can be modified easily and also connected to the Scanner\u2019s main control unit. A very extensive source for various camera models and home-made remote shutter release can be found on doc-diy.net . An existing remote release can be modified with minimal soldering skill and a total of two soldering points. The following pictures describe the basic procedure: (left) Infrared Remote Control for Nikon/Canon (ca. 5\u20ac) (middle) Open the enclosure. See the contact area (red circle) (right) The green circle shows the contacts that are normally connected by pressing the button (first image). The holes marked by the red circles can be used to connect two cables, that can later be connected to the scanner\u2019s control module. The difficult part is to solder two male jumper wires to the identified contact points ( red circles ). Shortening those two wires will have the same effect as pressing the button and it should trigger the camera. Connect the modified remote shutter release control to the two pins exposed to the front side of the scanners control module as shown on the first image of this chapter. Remote shutter release (II) This is another very typical remote shutter release. It contains three metal plates which gets pushed/connected consecutively ( red circle ). Creating a connection between the first and second metal plate will focus the camera. Wheras connecting all plates will trigger the shutter release. Connect one wire each to the top and to the bottom metal plate. Shortening those two wires will have the same effect as pressing the button and it should trigger the camera. Connect the modified remote shutter release control to the two pins exposed to the front side of the scanners control module as shown on the first image of this chapter. Bluetooth trigger (iOS/Android) A modified Bluetooth trigger can be used to trigger most smartphone cameras. The shown module is operated with a CR2032 button cell, which must be inserted on the back. As soon as the On / Off switch has been flipped, the blue LED lights up at regular intervals. The device must then be paired with the smartphone via Bluetooth. This can be done in the smartphone\u2019s setting menu. The device should be visible as \u201cAB Shutter 3\u201d and has to be coupled accordingly Connect the modified remote shutter release control to the two pins exposed to the front side of the scanners control module as shown on the first image of this chapter. Operation TODO","title":"Classic"},{"location":"hardware/OpenScanClassic/#openscan-classic","text":"","title":"OpenScan Classic"},{"location":"hardware/OpenScanClassic/#overview","text":"The OpenScan Classic is a compact desktop 3D scanner capable of scanning objects up to ~16 cm with an accuracy of up to 0.02 mm. The frame can be fully 3d printed, and all other components are off-the-shelf parts. You should be able to source all parts locally, or chose to support the OpenScan project by ordering (some) parts through Openscan.eu/shop . Currently, the following cameras can be used without any additional modifications: Arducam IMX519 16mp & autofocus, Pi Camera v2 8mp and Pi Camera v1.3 5mp, where the Arducam IMX519 has to be considered the gold standard (for now :). Alternatively, you can even use many DSLR cameras, which can be connected and controlled through the Raspberry Pis USB interface...","title":"Overview"},{"location":"hardware/OpenScanClassic/#bill-of-material-bom","text":"x M3x8 Screws x M3x12 Screws x M3 Nuts 1x Pi Shield 1x Nema 17 (>40Ncm) 1x Nema 17 (>13Ncm) 1x Raspberry Pi 3B+ or 4 (any) 1x Micro SD Card (>16GB) 1x Camera Ribbon Cable 15cm 1x Ringlight 1x Camera Module IMX519 (alternatively Pi Camera V2 or V1.3) or DSLR camera 2x M2x6 Nylon Screw 2x M2x6 Nylon Standoff 2x M2 Nuts (2x M2x12 Nylon Screw if you use the Pi Camera module) 3d printed parts: TODO","title":"Bill of material (BOM)"},{"location":"hardware/OpenScanClassic/#3d-printing","text":"Get the printable .stl (and design) files TODO","title":"3D Printing"},{"location":"hardware/OpenScanClassic/#assembly","text":"","title":"Assembly"},{"location":"hardware/OpenScanClassic/#control-module","text":"IMPORTANT: Skip this step until \"prepare control module\" if you intend to use external cameras only Make sure to follow the right setup for your camera module (either Arducam IMX519 or PiCamera V1.3/V2)","title":"Control module"},{"location":"hardware/OpenScanClassic/#arducam-imx519-16mp-with-autofocus","text":"1x Ringlight PCB 1x Arducam IMX519 16mp camera module 2x M2x6 screws 2x M2x6 standoffs 2x M2 nuts See the sequence of the parts: Make sure that the lens is properly centered (looking at the ringlight from the front as shown in the right image):","title":"Arducam IMX519 16mp with Autofocus"},{"location":"hardware/OpenScanClassic/#pi-camera-v21-or-v13","text":"1x Ringlight PCB Pi Camera v2.1 or v1.3 module 2x M2x12 screws 2x spacer 2x M2 nuts See the sequence of the parts:","title":"Pi Camera v2.1 or v1.3"},{"location":"hardware/OpenScanClassic/#prepare-control-module","text":"Control Module: Use 8x M3x8 screws to mount the ringlight module and the Pi Shield in the following way: Connect the ringlight module and the pi shield with the 50cm ringlight cable, connect the motor cables: Use the 15cm camera ribbon cable to connect the Raspberry Pi and the camera. Make sure that the ribbon cables side with the metal pins is facing away from the USB ports of the Raspberry Pi.: Make sure to properly align the Raspberry Pi with the Pin headers on the Pi Shield. Misalignment might destroy both the Raspberry Pi and the Pi Shield! : Your control module is ready to use and should look something like:","title":"Prepare control module"},{"location":"hardware/OpenScanClassic/#main-frame","text":"","title":"Main Frame"},{"location":"hardware/OpenScanClassic/#attach-large-motor","text":"Stand1_Nema_17.stl Nema 17 (min. 40Ncm) M3x8mm (4x) Gear_Small.stl (optional v2) (left) Mount the stepper motor with four M3x8mm Screws onto the Stand1.stl. (right) Press the Gear_small.stl onto the motor shaft. Make sure, that the gear and the motor shaft close flush at the front. Note: Depending on the printing accuracy, it may be necessary to pre-drill the screw holes with a 3mm drill bit. Furthermore the gear and the motor shaft might have a tight fit and you might have to \u201egently\u201c use the help of a hammer.","title":"Attach large motor"},{"location":"hardware/OpenScanClassic/#mount-reduction-gears","text":"Stand1_Nema_17.stl (after Step 4a) Adapter2.stl Steel pin (d=6mm, l>50mm) (left) The steel pin is pressed into the opening of the side stand. You can use a cordless screwdriver to \"drill\" the pin into the opening. (middle) The larger gear (Adapter2.stl) is pressed onto the steel pin. (right) The steel pin (top) and the motor shaft must NOT protrude forward from the components and should be flush with the surface. Superglue can be used to fix the position of the gears. Note: Both gears should match well and rotate relatively resistance free. If this is not the case, it may be necessary to replace the small gear with v2.stl or adjust the printer settings.","title":"Mount reduction gears"},{"location":"hardware/OpenScanClassic/#prepare-stand2","text":"Stand2.stl Adapter1.stl Steel pin (d=6mm, l>50mm) (left) The steel pin is pressed into the opening of the side stand. You can use a cordless screwdriver to \"drill\" the pin into the opening. (right) The adapter1.stl is pressed onto the steel pin. It is important to ensure that the steel pin does not protrude forward from the adapter. Note: The adapter can be fixed with superglue on the steel pin. It must be ensured that the steel pin can rotate freely in the stand.","title":"Prepare Stand2"},{"location":"hardware/OpenScanClassic/#prepare-turntable","text":"Turntable_Base_small.stl Nema 17 (min. 13Ncm, optional >40Ncm) M3x8mm (4x) Rotary_Arm.stl (2x) Turntable_Adapter.stl Mount the Nema 17 on Turntable_Base_small.stl using four M3x8mm screws: Place the Rotary Arm (2x) on the sides of the turntable_base.stl (red mark) and press any Turntable_Adapter.stl onto the motor shaft: The connections marked red can be fixed with super glue if they are too loose.","title":"Prepare Turntable"},{"location":"hardware/OpenScanClassic/#tilting-mechanism","text":"Stand 1 (after step 4b) Stand 2 (after step 5) Turntable_Base_small.stl (after step 6) M3x12mm (2x) Combine all prepared parts as shown: The height of the turntable has to be adapted for each scan object. Optimal height: Object to high (left) and to low (right): Insert two M3x12mm screws laterally into the adapters (red mark), so as to connect the side stands with the rotating arm (Turntable_Base + Rotary_Arm).","title":"Tilting mechanism"},{"location":"hardware/OpenScanClassic/#wiring-the-motors","text":"Control unit (after step 3) Tilting mechanism (after step 7/8) Stepper motor cable >70cm (2x) Connect the motors to the control unit:","title":"Wiring the motors"},{"location":"hardware/OpenScanClassic/#whole-setup","text":"","title":"Whole Setup"},{"location":"hardware/OpenScanClassic/#picameraarducam","text":"TODO add image of the whole setup","title":"PiCamera/Arducam"},{"location":"hardware/OpenScanClassic/#external-camera-via-usb","text":"TODO add image of the whole setup You can directly connect a camera via USB and use the OpenScan web interface to preview and capture photos automatically. . The functionality is based on the great GPhoto2 Library (see gphoto.org ) and the number of supported cameras is huge. NOTE: some cameras need to be set to a different operating mode (PTP mode). See this list on gphoto.org to check whether your camera is supported. It is necassary that Image Capture and Liveview are listed.","title":"External Camera (via USB)"},{"location":"hardware/OpenScanClassic/#external-camera-via-opto","text":"TODO add image of the whole setup","title":"External Camera (via Opto)"},{"location":"hardware/OpenScanClassic/#remote-shutter-release-i","text":"For (almost) all cameras you can buy a relatively cheap remote shutter release. These modules can be modified easily and also connected to the Scanner\u2019s main control unit. A very extensive source for various camera models and home-made remote shutter release can be found on doc-diy.net . An existing remote release can be modified with minimal soldering skill and a total of two soldering points. The following pictures describe the basic procedure: (left) Infrared Remote Control for Nikon/Canon (ca. 5\u20ac) (middle) Open the enclosure. See the contact area (red circle) (right) The green circle shows the contacts that are normally connected by pressing the button (first image). The holes marked by the red circles can be used to connect two cables, that can later be connected to the scanner\u2019s control module. The difficult part is to solder two male jumper wires to the identified contact points ( red circles ). Shortening those two wires will have the same effect as pressing the button and it should trigger the camera. Connect the modified remote shutter release control to the two pins exposed to the front side of the scanners control module as shown on the first image of this chapter.","title":"Remote shutter release (I)"},{"location":"hardware/OpenScanClassic/#remote-shutter-release-ii","text":"This is another very typical remote shutter release. It contains three metal plates which gets pushed/connected consecutively ( red circle ). Creating a connection between the first and second metal plate will focus the camera. Wheras connecting all plates will trigger the shutter release. Connect one wire each to the top and to the bottom metal plate. Shortening those two wires will have the same effect as pressing the button and it should trigger the camera. Connect the modified remote shutter release control to the two pins exposed to the front side of the scanners control module as shown on the first image of this chapter.","title":"Remote shutter release (II)"},{"location":"hardware/OpenScanClassic/#bluetooth-trigger-iosandroid","text":"A modified Bluetooth trigger can be used to trigger most smartphone cameras. The shown module is operated with a CR2032 button cell, which must be inserted on the back. As soon as the On / Off switch has been flipped, the blue LED lights up at regular intervals. The device must then be paired with the smartphone via Bluetooth. This can be done in the smartphone\u2019s setting menu. The device should be visible as \u201cAB Shutter 3\u201d and has to be coupled accordingly Connect the modified remote shutter release control to the two pins exposed to the front side of the scanners control module as shown on the first image of this chapter.","title":"Bluetooth trigger (iOS/Android)"},{"location":"hardware/OpenScanClassic/#operation","text":"TODO","title":"Operation"},{"location":"hardware/OpenScanMini/","text":"OpenScan Mini with Polarizer Module Overview The OpenScan Mini is a compact desktop 3D scanner capable of scanning objects up to ~8-10 cm with an accuracy of up to 0.02 mm. The frame can be fully 3d printed, and all other components are off-the-shelf parts. You should be able to source all parts locally, or chose to support the OpenScan project by ordering (some) parts through Openscan.eu/shop . Currently, the following cameras can be used without any additional modifications: Arducam IMX519 16mp & autofocus, Pi Camera v2 8mp and Pi Camera v1.3 5mp, where the Arducam IMX519 has to be considered the gold standard (for now :) Bill of material (BOM) 24x M3x8 screws 1x M3x12 screw 1x Pi Shield 1x Nema 17 (>40Ncm) 1x Nema 17 (>13Ncm) 1x Raspberry Pi 3B+ or 4 (any) 1x Micro SD Card (>16GB) 1x Camera Ribbon Cable 50cm 1x Ringlight 1x Camera Module IMX519 (alternatively Pi Camera V2 or V1.3) 2x M2x6 Nylon Screw 2x M2x6 Nylon Standoff 2x M2 Nuts (2x M2x12 Nylon Screw if you use the Pi Camera module) 1x Polarizer module 3d printed parts: * Frontplate * Base * Rotor * small gear * backplate * object holders (4 sizes) 3D Printing Get the printable .stl (and design) files here . PRINTER - you will need a print-bed of at least 200x200mm - depending on your printer's capabilities (and your risk aversion), all parts can be fitted onto one build plate of min. 220x210mm - printing all parts can be done in under 17h (tested on Prusa MK3S+ using default Draft profile) PRINT SETTINGS - support: no (* except for 07_polarizer_b - layer-height: 0.2-0.3 mm - print speed: depends on your printer's calibration MATERIAL - COLOR - main Frame: Please use a material without visible particles or structure. Avoid transparent materials - COLOR - 07_polarizer_a: translucent/natural - COLOR - 07_polarizer_b: any non-translucent material (like PETG black, Prusament Galaxy Black) - PLA is totally fine, since there is not a lot of mechanical strength needed - PETG, ABS, ASA can be used for increased temperature resistance in warm environments Assembly Frontplate + Pi-Shield 1x Frontplate (3d print) 1x Pi Shield 4x M3x8 Mount the Pi Shield to the front plate using four M3x8mm screws Base + Rotor 1x Base (3d print) 1x Rotor (3d print) lubricant and/or sandpaper (optional) Insert the rotor into the base and make sure, that the rotor can slide freely! (It might require some sanding and/or lubrication) Mounting the Turntable Motor 1x Base + Rotor 1x Nema17 small 4x M3x8 screws Make sure to mount the small stepper motor (Turntable) first. The motor connector should face to the left. Mounting the Rotor Motor 1x small gear (3d print) 1x Nema17 large 4x M3x8 screw Press the small gear onto the shaft of the larger stepper motor. Mount the stepper motor with four M3x8 screws like shown below. Move the large ring a couple of times to make sure, that the gears fit. Again, the motor connector should face to the left. Mounting the Raspberry Pi 1x Raspberry Pi 1x Micro SD Card with OpenScan Image. See Firmware - Setup - Prepare/compile the SD Card . (Alternatively you can use a recent Raspbian version, if you intend to build the firmware yourself.) 4x M3x8 screws Insert the Micro SD card into the slot of the Raspberry Pi. Mount the Raspberry Pi with four M3x8 screws. Make sure not to overtighten the screws, which might bend and damage the board. Note, that the Raspberry Pis screw holes are a tight fit for those M3 screws. Preparing the camera cable 1x camera ribbon cable (50cm) Insert the camera ribbon cable through the two slots (red arrows). Make sure that the metal plating of the cable is facing the stepper motor (yellow circle). Take care not to create sharp bends as this might damage the cable.: Continue through the next slot (again the metal plating should be facing away from you): Insert the camera ribbon cable into the socket. The metal plating should be facing away from the USB/Ethernet ports (yellow circle). Gently close the sockets bracke by pushing it down (dark part that likes to break). Preparing the Ringlight Module ** IMPORTANT: Make sure to follow the right setup for your camera module: Arducam IMX519 16mp with Autofocus 1x Ringlight PCB 1x Arducam IMX519 16mp camera module 2x M2x6 screws 2x M2x6 standoffs 2x M2 nuts See the sequence of the parts: Make sure that the lens is properly centered (looking at the ringlight from the front as shown in the right image): Pi Camera v2.1 or v1.3 1x Ringlight PCB Pi Camera v2.1 or v1.3 module 2x M2x12 screws 2x spacer 2x M2 nuts See the sequence of the parts: Mounting and connecting the Ringlight Module 1x Ringlight Module 1x 50cm ringlight power cable (3P JST XH) 4x M3x8 screws Mount the ringlight module using 4 M3x8mm bolts as indicated by the red arrows: Connect the camera ribbon cable with the camera. The Metal plating is facing down. (yellow circle) Connect the 50cm ringlight cable with 3P JST connectors to the Ringlight (red arrow): Guide the ringlight cable as indicated by the yellow circles: Connecting the Pi Shield 1x Frontplate with Pi Shield 2x stepper motor cable Connect the stepper motor cables to the Pi Shield and the corresponding stepper motors (see labels bellow): (1) Turntable (small Nema 17) (2) Rotor (large Nema 17) (3) ST XH 3P (from ringlight module, see previous step) Mounting the Frontplate 1x M3x12 screw 1x frontplate with Pi Shield 1x base/rotor Mount the frontplate to the base. Make sure that the pin headers of the Raspberry Pi and the Pi shield are properly aligned. (Yellow circle): Use the M3 screw to connect the frontplate to the base_ Mounting the Backplate 4x M3x8 screws base/rotor backplate (3d print) Make sure, that the ringlight cable is sitting in the guide slot. (yellow circle) Use the 4 M3x8 screws to mount the backplate (red arrows): Mounting the Diffuser/Polarizer OpenScan Mini Polarizer Module The Polarizer module can be easily mounted by clicking it onto the rotor: The polarizer module consists of two printed parts. It is very important that the smaller printed part (yellow circle) is not translucent in order to block all light. There are two pieces of linear polarizer foil. The smaller piece (15x11mm) was inserted into the slot (red arrow). The larger piece (75x66mm) is covering the whole front area except for the middle (red arrow). It is absolutely crucial that those two pieces are oriented perpendicularly against each other. The polarizer will greatly improve the results by filtering allmost all direct reflections. Starting the device for the first time Plug in a 12V (min. 2A power supply) and start the device. Continue with this guide, which shows the initial setup of the firmware and some general tips & tricks","title":"Mini"},{"location":"hardware/OpenScanMini/#openscan-mini-with-polarizer-module","text":"","title":"OpenScan Mini with Polarizer Module"},{"location":"hardware/OpenScanMini/#overview","text":"The OpenScan Mini is a compact desktop 3D scanner capable of scanning objects up to ~8-10 cm with an accuracy of up to 0.02 mm. The frame can be fully 3d printed, and all other components are off-the-shelf parts. You should be able to source all parts locally, or chose to support the OpenScan project by ordering (some) parts through Openscan.eu/shop . Currently, the following cameras can be used without any additional modifications: Arducam IMX519 16mp & autofocus, Pi Camera v2 8mp and Pi Camera v1.3 5mp, where the Arducam IMX519 has to be considered the gold standard (for now :)","title":"Overview"},{"location":"hardware/OpenScanMini/#bill-of-material-bom","text":"24x M3x8 screws 1x M3x12 screw 1x Pi Shield 1x Nema 17 (>40Ncm) 1x Nema 17 (>13Ncm) 1x Raspberry Pi 3B+ or 4 (any) 1x Micro SD Card (>16GB) 1x Camera Ribbon Cable 50cm 1x Ringlight 1x Camera Module IMX519 (alternatively Pi Camera V2 or V1.3) 2x M2x6 Nylon Screw 2x M2x6 Nylon Standoff 2x M2 Nuts (2x M2x12 Nylon Screw if you use the Pi Camera module) 1x Polarizer module 3d printed parts: * Frontplate * Base * Rotor * small gear * backplate * object holders (4 sizes)","title":"Bill of material (BOM)"},{"location":"hardware/OpenScanMini/#3d-printing","text":"Get the printable .stl (and design) files here . PRINTER - you will need a print-bed of at least 200x200mm - depending on your printer's capabilities (and your risk aversion), all parts can be fitted onto one build plate of min. 220x210mm - printing all parts can be done in under 17h (tested on Prusa MK3S+ using default Draft profile) PRINT SETTINGS - support: no (* except for 07_polarizer_b - layer-height: 0.2-0.3 mm - print speed: depends on your printer's calibration MATERIAL - COLOR - main Frame: Please use a material without visible particles or structure. Avoid transparent materials - COLOR - 07_polarizer_a: translucent/natural - COLOR - 07_polarizer_b: any non-translucent material (like PETG black, Prusament Galaxy Black) - PLA is totally fine, since there is not a lot of mechanical strength needed - PETG, ABS, ASA can be used for increased temperature resistance in warm environments","title":"3D Printing"},{"location":"hardware/OpenScanMini/#assembly","text":"","title":"Assembly"},{"location":"hardware/OpenScanMini/#frontplate-pi-shield","text":"1x Frontplate (3d print) 1x Pi Shield 4x M3x8 Mount the Pi Shield to the front plate using four M3x8mm screws","title":"Frontplate + Pi-Shield"},{"location":"hardware/OpenScanMini/#base-rotor","text":"1x Base (3d print) 1x Rotor (3d print) lubricant and/or sandpaper (optional) Insert the rotor into the base and make sure, that the rotor can slide freely! (It might require some sanding and/or lubrication)","title":"Base + Rotor"},{"location":"hardware/OpenScanMini/#mounting-the-turntable-motor","text":"1x Base + Rotor 1x Nema17 small 4x M3x8 screws Make sure to mount the small stepper motor (Turntable) first. The motor connector should face to the left.","title":"Mounting the Turntable Motor"},{"location":"hardware/OpenScanMini/#mounting-the-rotor-motor","text":"1x small gear (3d print) 1x Nema17 large 4x M3x8 screw Press the small gear onto the shaft of the larger stepper motor. Mount the stepper motor with four M3x8 screws like shown below. Move the large ring a couple of times to make sure, that the gears fit. Again, the motor connector should face to the left.","title":"Mounting the Rotor Motor"},{"location":"hardware/OpenScanMini/#mounting-the-raspberry-pi","text":"1x Raspberry Pi 1x Micro SD Card with OpenScan Image. See Firmware - Setup - Prepare/compile the SD Card . (Alternatively you can use a recent Raspbian version, if you intend to build the firmware yourself.) 4x M3x8 screws Insert the Micro SD card into the slot of the Raspberry Pi. Mount the Raspberry Pi with four M3x8 screws. Make sure not to overtighten the screws, which might bend and damage the board. Note, that the Raspberry Pis screw holes are a tight fit for those M3 screws.","title":"Mounting the Raspberry Pi"},{"location":"hardware/OpenScanMini/#preparing-the-camera-cable","text":"1x camera ribbon cable (50cm) Insert the camera ribbon cable through the two slots (red arrows). Make sure that the metal plating of the cable is facing the stepper motor (yellow circle). Take care not to create sharp bends as this might damage the cable.: Continue through the next slot (again the metal plating should be facing away from you): Insert the camera ribbon cable into the socket. The metal plating should be facing away from the USB/Ethernet ports (yellow circle). Gently close the sockets bracke by pushing it down (dark part that likes to break).","title":"Preparing the camera cable"},{"location":"hardware/OpenScanMini/#preparing-the-ringlight-module","text":"** IMPORTANT: Make sure to follow the right setup for your camera module:","title":"Preparing the Ringlight Module"},{"location":"hardware/OpenScanMini/#arducam-imx519-16mp-with-autofocus","text":"1x Ringlight PCB 1x Arducam IMX519 16mp camera module 2x M2x6 screws 2x M2x6 standoffs 2x M2 nuts See the sequence of the parts: Make sure that the lens is properly centered (looking at the ringlight from the front as shown in the right image):","title":"Arducam IMX519 16mp with Autofocus"},{"location":"hardware/OpenScanMini/#pi-camera-v21-or-v13","text":"1x Ringlight PCB Pi Camera v2.1 or v1.3 module 2x M2x12 screws 2x spacer 2x M2 nuts See the sequence of the parts:","title":"Pi Camera v2.1 or v1.3"},{"location":"hardware/OpenScanMini/#mounting-and-connecting-the-ringlight-module","text":"1x Ringlight Module 1x 50cm ringlight power cable (3P JST XH) 4x M3x8 screws Mount the ringlight module using 4 M3x8mm bolts as indicated by the red arrows: Connect the camera ribbon cable with the camera. The Metal plating is facing down. (yellow circle) Connect the 50cm ringlight cable with 3P JST connectors to the Ringlight (red arrow): Guide the ringlight cable as indicated by the yellow circles:","title":"Mounting and connecting the Ringlight Module"},{"location":"hardware/OpenScanMini/#connecting-the-pi-shield","text":"1x Frontplate with Pi Shield 2x stepper motor cable Connect the stepper motor cables to the Pi Shield and the corresponding stepper motors (see labels bellow): (1) Turntable (small Nema 17) (2) Rotor (large Nema 17) (3) ST XH 3P (from ringlight module, see previous step)","title":"Connecting the Pi Shield"},{"location":"hardware/OpenScanMini/#mounting-the-frontplate","text":"1x M3x12 screw 1x frontplate with Pi Shield 1x base/rotor Mount the frontplate to the base. Make sure that the pin headers of the Raspberry Pi and the Pi shield are properly aligned. (Yellow circle): Use the M3 screw to connect the frontplate to the base_","title":"Mounting the Frontplate"},{"location":"hardware/OpenScanMini/#mounting-the-backplate","text":"4x M3x8 screws base/rotor backplate (3d print) Make sure, that the ringlight cable is sitting in the guide slot. (yellow circle) Use the 4 M3x8 screws to mount the backplate (red arrows):","title":"Mounting the Backplate"},{"location":"hardware/OpenScanMini/#mounting-the-diffuserpolarizer","text":"OpenScan Mini Polarizer Module The Polarizer module can be easily mounted by clicking it onto the rotor: The polarizer module consists of two printed parts. It is very important that the smaller printed part (yellow circle) is not translucent in order to block all light. There are two pieces of linear polarizer foil. The smaller piece (15x11mm) was inserted into the slot (red arrow). The larger piece (75x66mm) is covering the whole front area except for the middle (red arrow). It is absolutely crucial that those two pieces are oriented perpendicularly against each other. The polarizer will greatly improve the results by filtering allmost all direct reflections.","title":"Mounting the Diffuser/Polarizer"},{"location":"hardware/OpenScanMini/#starting-the-device-for-the-first-time","text":"Plug in a 12V (min. 2A power supply) and start the device. Continue with this guide, which shows the initial setup of the firmware and some general tips & tricks","title":"Starting the device for the first time"},{"location":"hardware/PCBs/","text":"PCBs Pi Shield The OpenScan Pi Shield can be used to control two independent stepper motors and a variety of different cameras (Pi Camera, various Arducams, DSLR - via GPhoto and external Cameras like Smartphone and others). The mechanism can be used in various forms (see for example OpenScan Mini + Classic and it could be easily adapted to be used as a camera slider or in other mechanisms. BOM Nr. Picture Count Name 1 1x Raspberry Pi Shield 2 4x Pin Header female, 8p, 2.54 3 1x Pin Header female, 2p, 2.54 4 1x Pin Header male, 3p, 2.54 5 2x Pin Header male, 4p, 2.54 6 1x Pin Header female, 2x20p, 2.54 7 1x JST-XH-3P 90\u00b0 8 1x DCDC converter, 12V->5V, >2.5A 9 2x IRLZ34N 10 1x Barrel Connector, 5.5-2.1mm 11 1x Switch 12 2x Capacitor 100uF, 16V 13 1x Resistor 220 Ohm 14 1x Optocoupler PC817 Important remarks DCDC converter FOLLOW THIS STEP CAREFULLY AS ANY ERROR CAN DESTROY THE RASPBERRY PI The voltage regulator IS NOT set to 5V by default, which you will have to do as shown here: solder the pin header (4) to the pi shield pcb check the back of the voltage regulator (8). The 5V solder pads (A) must be bridged. The connection at point (B) must be disconnected by scratching. This should set the converter to 5V Alternatively you can adjust the potentiometer on the front to set the correct output voltage of 5V. When soldering the voltage regulator to the pin headers, make sure to have the right orientation and leave the uppermost hole free Control the Voltage!! Before connecting any motors or the Raspberry Pi, you need to check if the voltage regulator is set to the right output of 5V. This can be done by connecting the PCB to 12V power supply through the barrel connector, switching (11.) to the lower position and checking the voltage between point (C) and (D), which must be 5.1V (\u00b10.1V). If this is not the case, you have to use the potentiometer on the voltage regulator (8.) to change the output voltage accordingly. Capacitors (12) make sure to orient the capacitors in the right way due to their polarity. The negative side is labeled both on the PCB and on the capacitor itself. Optocoupler (14) Make sure to orient the optocoupler correctly. There is a small dot in one of the corners, which should face the resistor. see the following closeup: Soldering PLEASE MAKE SURE TO CHECK OUT THE IMPORTANT REMARKS EARLIER Back: Front: Ringlight v1 BOM Nr. Picture Count Name 1 1x Raspberry Pi Ringlight PCB 2 8x LED 1W 3 2x Resistor 1Ohm 4 1x JST-XH-3P 90\u00b0 Important remarks LED orientation Make sure that all LEDs are aligned correctly as shown in the following close-up. The hole on one side of the LED has to be facing the printed circle on the PCB. Soldering You can test the circuit's functionality by applying 12V directly to the Ringlight PCB as shown in the following images:","title":"PCB"},{"location":"hardware/PCBs/#pcbs","text":"","title":"PCBs"},{"location":"hardware/PCBs/#pi-shield","text":"The OpenScan Pi Shield can be used to control two independent stepper motors and a variety of different cameras (Pi Camera, various Arducams, DSLR - via GPhoto and external Cameras like Smartphone and others). The mechanism can be used in various forms (see for example OpenScan Mini + Classic and it could be easily adapted to be used as a camera slider or in other mechanisms.","title":"Pi Shield"},{"location":"hardware/PCBs/#bom","text":"Nr. Picture Count Name 1 1x Raspberry Pi Shield 2 4x Pin Header female, 8p, 2.54 3 1x Pin Header female, 2p, 2.54 4 1x Pin Header male, 3p, 2.54 5 2x Pin Header male, 4p, 2.54 6 1x Pin Header female, 2x20p, 2.54 7 1x JST-XH-3P 90\u00b0 8 1x DCDC converter, 12V->5V, >2.5A 9 2x IRLZ34N 10 1x Barrel Connector, 5.5-2.1mm 11 1x Switch 12 2x Capacitor 100uF, 16V 13 1x Resistor 220 Ohm 14 1x Optocoupler PC817","title":"BOM"},{"location":"hardware/PCBs/#important-remarks","text":"","title":"Important remarks"},{"location":"hardware/PCBs/#dcdc-converter","text":"FOLLOW THIS STEP CAREFULLY AS ANY ERROR CAN DESTROY THE RASPBERRY PI The voltage regulator IS NOT set to 5V by default, which you will have to do as shown here: solder the pin header (4) to the pi shield pcb check the back of the voltage regulator (8). The 5V solder pads (A) must be bridged. The connection at point (B) must be disconnected by scratching. This should set the converter to 5V Alternatively you can adjust the potentiometer on the front to set the correct output voltage of 5V. When soldering the voltage regulator to the pin headers, make sure to have the right orientation and leave the uppermost hole free","title":"DCDC converter"},{"location":"hardware/PCBs/#control-the-voltage","text":"Before connecting any motors or the Raspberry Pi, you need to check if the voltage regulator is set to the right output of 5V. This can be done by connecting the PCB to 12V power supply through the barrel connector, switching (11.) to the lower position and checking the voltage between point (C) and (D), which must be 5.1V (\u00b10.1V). If this is not the case, you have to use the potentiometer on the voltage regulator (8.) to change the output voltage accordingly.","title":"Control the Voltage!!"},{"location":"hardware/PCBs/#capacitors","text":"(12) make sure to orient the capacitors in the right way due to their polarity. The negative side is labeled both on the PCB and on the capacitor itself.","title":"Capacitors"},{"location":"hardware/PCBs/#optocoupler","text":"(14) Make sure to orient the optocoupler correctly. There is a small dot in one of the corners, which should face the resistor. see the following closeup:","title":"Optocoupler"},{"location":"hardware/PCBs/#soldering","text":"PLEASE MAKE SURE TO CHECK OUT THE IMPORTANT REMARKS EARLIER Back: Front:","title":"Soldering"},{"location":"hardware/PCBs/#ringlight-v1","text":"","title":"Ringlight v1"},{"location":"hardware/PCBs/#bom_1","text":"Nr. Picture Count Name 1 1x Raspberry Pi Ringlight PCB 2 8x LED 1W 3 2x Resistor 1Ohm 4 1x JST-XH-3P 90\u00b0","title":"BOM"},{"location":"hardware/PCBs/#important-remarks_1","text":"","title":"Important remarks"},{"location":"hardware/PCBs/#led-orientation","text":"Make sure that all LEDs are aligned correctly as shown in the following close-up. The hole on one side of the LED has to be facing the printed circle on the PCB.","title":"LED orientation"},{"location":"hardware/PCBs/#soldering_1","text":"You can test the circuit's functionality by applying 12V directly to the Ringlight PCB as shown in the following images:","title":"Soldering"},{"location":"photogrammetry/basics/","text":"How to create a perfect 3d scan TLDR A perfect object's surface for photogrammetry looks something like this: * thousands of distinct/random features * no specular highlights * no blurry areas * high contrast Guide It is all about the object's surface and some basic camera and lighting settings. But fortunately, there are some neat little tricks to scan almost any kind of object. The following flow chart gives an overview and should be printed and placed next to your scanner. Every new object poses a challenge, so take your time answering each individual question and adjust your workflow accordingly Below you can find many examples and explanations. Table of Contents OBJECT Plastic Miniature Plastic replacment part Plastic 3D printed miniature Metal Key Cast Metal Tank Chain Stone spinning whorl (archeology) Flintstone tool/weapon LIGHT Cross polarization CAMERA OBJECT I am using either the OpenScan Classic or Mini with their ring-light turned on to create the following examples: Plastic miniature bad bad very good without polarizer with polarizer with polarizer and scanning spray The object has large unicolor areas and a lot of specular highlights The specular highlights can be removed with cross-polarisation (which is not absolutely necessary, but helps in the next step) Add thousands of tiny dots by applying a fine layer of scanning/chalk spray, the dots could be finer and denser. Plastic replacement part bad okay-ish perfect without polarizer with polarizer with polarizer and scanning spray The object seems to have a lot of surface features, where in fact it is almost totally unicolor. What you see here are thousands of specular highlights The specular highlights can be removed with cross-polarisation. Now, you are able to see, that the object is almost completely featureless (except for some small pieces of dirt, which might already be enough.) Add thousands of tiny dots by applying a fine layer of scanning/chalk spray. This is an example of a perfectly random, feature-rich surface Plastic 3D Printed miniature bad bad perfect without polarizer with polarizer with polarizer and scanning spray Again, the surface seems feature-rich, but all you see are specular highlights created by the surface of the 3d print As soon as you add cross-polarization, all those highlights disappear and not many features are left Create a perfect, feature-rich surface with the help of some scanning spray metal key bad bad good without polarizer with polarizer with polarizer and scanning spray lots of specular highlights and almost no distinct surface features due to the high reflectivity of the surface, there are still specular highlights visible when using cross-polarisation (this could be avoided in a completely dark environment + polarized light source) adding dots helps a lot to create enough features, but the remaining specular highlights might create some noise in the resulting 3d mesh. To improve the result, you would have to matte the surface before applying the scanning spray Cast metal tank chain bad very good without polarizer with polarizer Stone spinning whorl This is basically as good as it could be, lots of features and almost no specular highlights. Note, that not all types of stone show that amount of surface features/graininess. perfect perfect without polarizer with polarizer Stone flintstone tool bad good without polarizer with polarizer A lot of specular highlights The feature on this surface are not very distinct and a little bit washed-out. Scanning spray could definitely help a lot Wood This is basically as good as it could be, lots of features and almost no specular highlights. Note, that not all types of wood show that amount of surface features/graininess. perfect perfect without polarizer with polarizer Fabric Skin LIGHT Cross_polarization CAMERA","title":"Basics"},{"location":"photogrammetry/basics/#how-to-create-a-perfect-3d-scan","text":"","title":"How to create a perfect 3d scan"},{"location":"photogrammetry/basics/#tldr","text":"A perfect object's surface for photogrammetry looks something like this: * thousands of distinct/random features * no specular highlights * no blurry areas * high contrast","title":"TLDR"},{"location":"photogrammetry/basics/#guide","text":"It is all about the object's surface and some basic camera and lighting settings. But fortunately, there are some neat little tricks to scan almost any kind of object. The following flow chart gives an overview and should be printed and placed next to your scanner. Every new object poses a challenge, so take your time answering each individual question and adjust your workflow accordingly Below you can find many examples and explanations.","title":"Guide"},{"location":"photogrammetry/basics/#table-of-contents","text":"OBJECT Plastic Miniature Plastic replacment part Plastic 3D printed miniature Metal Key Cast Metal Tank Chain Stone spinning whorl (archeology) Flintstone tool/weapon LIGHT Cross polarization CAMERA","title":"Table of Contents"},{"location":"photogrammetry/basics/#object","text":"I am using either the OpenScan Classic or Mini with their ring-light turned on to create the following examples:","title":"OBJECT"},{"location":"photogrammetry/basics/#plastic-miniature","text":"bad bad very good without polarizer with polarizer with polarizer and scanning spray The object has large unicolor areas and a lot of specular highlights The specular highlights can be removed with cross-polarisation (which is not absolutely necessary, but helps in the next step) Add thousands of tiny dots by applying a fine layer of scanning/chalk spray, the dots could be finer and denser.","title":"Plastic miniature"},{"location":"photogrammetry/basics/#plastic-replacement-part","text":"bad okay-ish perfect without polarizer with polarizer with polarizer and scanning spray The object seems to have a lot of surface features, where in fact it is almost totally unicolor. What you see here are thousands of specular highlights The specular highlights can be removed with cross-polarisation. Now, you are able to see, that the object is almost completely featureless (except for some small pieces of dirt, which might already be enough.) Add thousands of tiny dots by applying a fine layer of scanning/chalk spray. This is an example of a perfectly random, feature-rich surface","title":"Plastic replacement part"},{"location":"photogrammetry/basics/#plastic-3d-printed-miniature","text":"bad bad perfect without polarizer with polarizer with polarizer and scanning spray Again, the surface seems feature-rich, but all you see are specular highlights created by the surface of the 3d print As soon as you add cross-polarization, all those highlights disappear and not many features are left Create a perfect, feature-rich surface with the help of some scanning spray","title":"Plastic 3D Printed miniature"},{"location":"photogrammetry/basics/#metal-key","text":"bad bad good without polarizer with polarizer with polarizer and scanning spray lots of specular highlights and almost no distinct surface features due to the high reflectivity of the surface, there are still specular highlights visible when using cross-polarisation (this could be avoided in a completely dark environment + polarized light source) adding dots helps a lot to create enough features, but the remaining specular highlights might create some noise in the resulting 3d mesh. To improve the result, you would have to matte the surface before applying the scanning spray","title":"metal key"},{"location":"photogrammetry/basics/#cast-metal-tank-chain","text":"bad very good without polarizer with polarizer","title":"Cast metal tank chain"},{"location":"photogrammetry/basics/#stone-spinning-whorl","text":"This is basically as good as it could be, lots of features and almost no specular highlights. Note, that not all types of stone show that amount of surface features/graininess. perfect perfect without polarizer with polarizer","title":"Stone spinning whorl"},{"location":"photogrammetry/basics/#stone-flintstone-tool","text":"bad good without polarizer with polarizer A lot of specular highlights The feature on this surface are not very distinct and a little bit washed-out. Scanning spray could definitely help a lot","title":"Stone flintstone tool"},{"location":"photogrammetry/basics/#wood","text":"This is basically as good as it could be, lots of features and almost no specular highlights. Note, that not all types of wood show that amount of surface features/graininess. perfect perfect without polarizer with polarizer","title":"Wood"},{"location":"photogrammetry/basics/#fabric","text":"","title":"Fabric"},{"location":"photogrammetry/basics/#skin","text":"","title":"Skin"},{"location":"photogrammetry/basics/#light","text":"","title":"LIGHT"},{"location":"photogrammetry/basics/#cross_polarization","text":"","title":"Cross_polarization"},{"location":"photogrammetry/basics/#camera","text":"","title":"CAMERA"},{"location":"photogrammetry/quality/","text":"3D Scan Quality Overview all scans shown here are raw scans without any post-processing. Scaling was done using either a reference measurement or ICP fine registration using the free software CloudCompare Scaling An inherent challenge of photogrammetry 3d scanning is, that the resulting 3D models will not come with an accurate scale. Therefore, it is always(*) necessary to scale the model using a reference measurement. Note, that this is an additional step, which is not needed for most other scanners. (*) the only way to circumvent this issue, is automatic scaling using either known camera positions and/or the use of markers. Mesh accuracy Mesh Resolution It is possible to resolve even finest features. In the following mesh you can see some surface patterns. Those vertical lines result from the printing process (MSLA) and correspond to the pixel size of the 3d printers screen. Texture Comparing different cameras Left - OpenScan Mini with Pi Camera v2.1 (8mp) Right - OpenScan Mini with Arducam IMX519 (16mp) and autofocus Comparison with other scanners Left - OpenScan Mini with Pi Camera v2.1 (8mp) Right - Thunk 3D Cooper M20","title":"Quality"},{"location":"photogrammetry/quality/#3d-scan-quality","text":"","title":"3D Scan Quality"},{"location":"photogrammetry/quality/#overview","text":"all scans shown here are raw scans without any post-processing. Scaling was done using either a reference measurement or ICP fine registration using the free software CloudCompare","title":"Overview"},{"location":"photogrammetry/quality/#scaling","text":"An inherent challenge of photogrammetry 3d scanning is, that the resulting 3D models will not come with an accurate scale. Therefore, it is always(*) necessary to scale the model using a reference measurement. Note, that this is an additional step, which is not needed for most other scanners. (*) the only way to circumvent this issue, is automatic scaling using either known camera positions and/or the use of markers.","title":"Scaling"},{"location":"photogrammetry/quality/#mesh-accuracy","text":"","title":"Mesh accuracy"},{"location":"photogrammetry/quality/#mesh-resolution","text":"It is possible to resolve even finest features. In the following mesh you can see some surface patterns. Those vertical lines result from the printing process (MSLA) and correspond to the pixel size of the 3d printers screen.","title":"Mesh Resolution"},{"location":"photogrammetry/quality/#texture","text":"","title":"Texture"},{"location":"photogrammetry/quality/#comparing-different-cameras","text":"Left - OpenScan Mini with Pi Camera v2.1 (8mp) Right - OpenScan Mini with Arducam IMX519 (16mp) and autofocus","title":"Comparing different cameras"},{"location":"photogrammetry/quality/#comparison-with-other-scanners","text":"Left - OpenScan Mini with Pi Camera v2.1 (8mp) Right - Thunk 3D Cooper M20","title":"Comparison with other scanners"},{"location":"photogrammetry/software/","text":"Photogrammetry Software Desktop Software Commercial Software Description & Remarks Links Reality Capture capturingreality.com Agisoft Metashape agisoft.com 3DF Zephyr 3dflow.net Bentley Context Capture bentley.com Open-Source and/or free App Description & Remarks Links AliceVision Meshroom (+) intuitive user interface (+) is being actively developed (-) low reconstruction speed (+) One-Click-Reconstruktion (+) Output: pointcloud, mesh, texture (-) GPU with CUDA required (Nvidia) (-) sub-optimal default settings alicevision.org VisualSFM (+) very fast reconstruction (+) simple user interface (-) sometimes hard to set up (-) Output: pointcloud only (need additional software for meshing, e.g. CloudCompare or Meshlab) (-) only for private users CCWU.me OpenDroneMap opendronemap.org OpenMVG openMVG@github MVE cs.cmu.edu COLMAP colmap.github.io MicMac MicMac.ensg.eu Mobile Apps App Description & Remarks Links PhotoCatch iOS + MacOS photocatch@apps.apple.com Polycam poly.cam Scaniverse scaniverse.com APIs","title":"Software"},{"location":"photogrammetry/software/#photogrammetry-software","text":"","title":"Photogrammetry Software"},{"location":"photogrammetry/software/#desktop-software","text":"","title":"Desktop Software"},{"location":"photogrammetry/software/#commercial","text":"Software Description & Remarks Links Reality Capture capturingreality.com Agisoft Metashape agisoft.com 3DF Zephyr 3dflow.net Bentley Context Capture bentley.com","title":"Commercial"},{"location":"photogrammetry/software/#open-source-andor-free","text":"App Description & Remarks Links AliceVision Meshroom (+) intuitive user interface (+) is being actively developed (-) low reconstruction speed (+) One-Click-Reconstruktion (+) Output: pointcloud, mesh, texture (-) GPU with CUDA required (Nvidia) (-) sub-optimal default settings alicevision.org VisualSFM (+) very fast reconstruction (+) simple user interface (-) sometimes hard to set up (-) Output: pointcloud only (need additional software for meshing, e.g. CloudCompare or Meshlab) (-) only for private users CCWU.me OpenDroneMap opendronemap.org OpenMVG openMVG@github MVE cs.cmu.edu COLMAP colmap.github.io MicMac MicMac.ensg.eu","title":"Open-Source and/or free"},{"location":"photogrammetry/software/#mobile-apps","text":"App Description & Remarks Links PhotoCatch iOS + MacOS photocatch@apps.apple.com Polycam poly.cam Scaniverse scaniverse.com","title":"Mobile Apps"},{"location":"photogrammetry/software/#apis","text":"","title":"APIs"},{"location":"showcase/scan/","text":"A collection of amazing 3d scans Participate If you want to share your best 3D scan , please follow this link and open an issue. Provide some more details about your scan, so that others can learn :) a short and decriptive title Photo / Rendering (you can easily drag&drop images and videos into the issue form) Some details about the capturing (scanner used, surface preparation, how many photos, which software, ..., anything worth mentioning) optional: Link to 3D file (e.g. on SketchFab) optional: provide a link with the dataset for others to play with (e.g. GoogleDrive/DropBox) Please make sure, that the scan does not violate any intellectual property/copyrights! By submitting the above mentioned details, you agree, that the given information can be used throughout the OpenScan Organisation","title":"3D Scans"},{"location":"showcase/scan/#a-collection-of-amazing-3d-scans","text":"","title":"A collection of amazing 3d scans"},{"location":"showcase/scan/#participate","text":"If you want to share your best 3D scan , please follow this link and open an issue. Provide some more details about your scan, so that others can learn :) a short and decriptive title Photo / Rendering (you can easily drag&drop images and videos into the issue form) Some details about the capturing (scanner used, surface preparation, how many photos, which software, ..., anything worth mentioning) optional: Link to 3D file (e.g. on SketchFab) optional: provide a link with the dataset for others to play with (e.g. GoogleDrive/DropBox) Please make sure, that the scan does not violate any intellectual property/copyrights! By submitting the above mentioned details, you agree, that the given information can be used throughout the OpenScan Organisation","title":"Participate"},{"location":"showcase/scanner/","text":"A collection of amazing 3d scanner builds Participate If you want to inspire others, please share images or videos of your unique scanner builds. No matter how sketchy, low- or high- budget it is. Simply enter some details through the following form: this link Consider the following points: a short and decriptive title Photo / Rendering (you can easily drag&drop images and videos into the issue form) Some details about your motivation behind the device optional: Some details about the build process/manual optional: Link to 3D files and additional resources (e.g. Youtube, Printables) Please make sure, that the scan does not violate any intellectual property/copyrights! By submitting the above mentioned details, you agree, that the given information can be used and shared throughout the OpenScan Organisation","title":"Scanner"},{"location":"showcase/scanner/#a-collection-of-amazing-3d-scanner-builds","text":"","title":"A collection of amazing 3d scanner builds"},{"location":"showcase/scanner/#participate","text":"If you want to inspire others, please share images or videos of your unique scanner builds. No matter how sketchy, low- or high- budget it is. Simply enter some details through the following form: this link Consider the following points: a short and decriptive title Photo / Rendering (you can easily drag&drop images and videos into the issue form) Some details about your motivation behind the device optional: Some details about the build process/manual optional: Link to 3D files and additional resources (e.g. Youtube, Printables) Please make sure, that the scan does not violate any intellectual property/copyrights! By submitting the above mentioned details, you agree, that the given information can be used and shared throughout the OpenScan Organisation","title":"Participate"}]}